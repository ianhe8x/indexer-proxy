name: "Deploy-docker-amd64"
on:
  workflow_dispatch:
    inputs:
      isLatest:
        description: 'Add latest tag'
        default: 'true'
        required: true

jobs:
  build-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
          token: ${{ secrets.REPO_TOKEN }}
      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/docker_cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Restore docker
        run: .github/actions/docker-cache/restore.sh ${{ runner.temp }}/docker_cache/cache.tar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: onfinality
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      ## node
      - name: Get updated coordinator version
        id: fetch-version
        run: |
          sh .github/workflows/scripts/fetchVersion.sh

      - name: Build and push
        if: github.event.inputs.isLatest == 'false'
        uses: docker/build-push-action@v4
        with:
          push: false
          platforms: amd64
          file: ./proxy/Dockerfile
          tags: onfinality/subql-indexer-proxy:v${{ steps.fetch-version.outputs.VERSION }}
          build-args: RELEASE_VERSION=${{ steps.fetch-version.outputs.VERSION }}

      - name: Build and push
        if: github.event.inputs.isLatest == 'true'
        uses: docker/build-push-action@v4
        with:
          push: false
          platforms: amd64
          file: ./proxy/Dockerfile
          tags: onfinality/subql-indexer-proxy:v${{ steps.fetch-version.outputs.VERSION }},onfinality/subql-indexer-proxy:latest
          build-args: RELEASE_VERSION=${{ steps.fetch-version.outputs.VERSION }}
      - name: Backup docker
        run: .github/actions/docker-cache/backup.sh ${{ runner.temp }}/docker_cache/cache.tar
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
